<template>
    <div class="container-fluid">
        <div class="row justify-content-center">
          <session :userx='user'></session>
            <modalcash :userx='user'></modalcash>
          <div id="overlay" v-if="loading">
            <tile style="color:white"></tile>
            <center ><p class="text-light h6 centerthis">LOADING PLEASE WAIT..</p></center>
          </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-dark text-white font-weight-bold">Deposit</div>
                    <div class="card-body">
                        <label for="user">Select Username</label>
                        <!-- <v-select :options="users" :reduce="farm_owner => farm_owner.entry_name" label="entry_name" taggable :select-on-key-codes="[188, 13]" selectOnTab :clearable="false"/> -->
                        <v-select v-model='deposit.id' :options="users" placeholder="Select username.." :reduce="username => username.id" id="user" label="username" :select-on-key-codes="[188, 13]" selectOnTab :clearable="false"/>
                          <label for="amount">Amount</label>
                          <input type="number" id="amount" class="form-control" v-model='deposit.amount' oninput="this.value = Math.round(this.value);">
                          <label for="">Pin of Supervisor</label>
                          <input type="text" class="form-control" v-model="deposit.pin" maxlength="4">
                    </div>
                    <div class="card-footer">
                      <a class="btn btn-success btn-sm col-md-12 text-white" @click.prevent='depositx'>Deposit</a>
                    </div>
                </div>
                <div class="card card-stats">
                <div class="card-header card-header-success card-header-icon">
                  <div class="card-icon">
                    <i class="material-icons">account_balance</i>
                  </div>
                  <p class="card-category">Your Wallet Account</p>
                  <h3 class="card-title">{{Number(cash.cash).toLocaleString('en-PH', {style:'currency', currency:'PHP'})}}

                  </h3>
                </div>
                <div class="card-footer">
                  <div class="stats">
                    <i class="material-icons">update</i>  As of {{new Date().toLocaleString()}}.
                  </div>
                </div>
              </div>
            </div>
        </div>
    </div>
</template>

<script>
    export default {
      props:['user'],
      data(){
        return{
          loading:false,
          users:[],
          cash:[],
          name:'',
          checkcash:[],
          deposit:new Form({
            id:'',
            amount:'',
            pin:''
          })
        }
      },
      methods:{
        getmycash(){
          axios.get('/pick20/getmycash').then(response=>{
            this.cash = response.data
          })
        },
        depositx(){
          this.users.forEach((val)=>{
            if (val.id==this.deposit.id) {

              this.name = val.username ;
            }
          });
          Swal.fire({
            title: 'Please Confirm',
            html:"Do you really want to deposit <b style='color:yellow'>"+Number(this.deposit.amount).toLocaleString()+"</b> to <b style='color:yellow'>"+this.name+"</b>",
            // text: "Do you really want to deposit <b>"+Number(this.deposit.amount).toLocaleString()+"</b> to <b>"+this.name+"</b>",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Confirm',
            cancelButtonText: 'Go Back',
          }).then((result) => {
            if (result.isConfirmed) {
              this.loading=true;
              this.deposit.post('/pick20/depositconfirmed').then(response=>{
                if (response.data.error) {
                  this.loading=false;
                  Swal.fire(
                    'Ooops!',
                    'Pin is Incorrect',
                    'error'
                  );
                }else {
                  this.loading=false;
                  Swal.fire(
                    'Success!',
                    'Deposited '+this.deposit.amount+' to user',
                    'success'
                  );
                  this.getmycash();
                    this.deposit.reset();
                }

              }).catch(()=>{
                this.loading=false;
                Swal.fire(
                  'Ooops!',
                  'You dont have enough balance',
                  'error'
                );
              });
            }
          })
        },
        checkcashin(){
          axios.get('pick20/getuser').then(response=>{
            this.checkcash = response.data;
            if (this.checkcash.role===4&&this.checkcash.cash<100) {
              $('#cashin2').modal('show');
            }
          })
        },
        getallusers(){
          this.loading=true;
          axios.get('/pick20/allusersdeposit').then(response=>{
            this.users = response.data;
            this.loading=false;
          })
        }
      },
        mounted() {
          this.checkcashin();
          this.getmycash();
          this.getallusers();
        }
    }
</script>
